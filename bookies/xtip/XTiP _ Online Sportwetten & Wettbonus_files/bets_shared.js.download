Bettingslip.checkBetsWithGGL = false;
Bettingslip.removeInactiveTips = function()
{
    var removebetscollection = new Array();
    for (i in Bettingslip.bettingslips)
    {
        for (j in Bettingslip.bettingslips[i].bets)
        {
            entry = Bettingslip.bettingslips[i].bets[j];
            if(entry.active === -1)
            {
                removebetscollection.push(entry);
            }
        }
    }
    removebetscollection.sort(function(a,b){
        return a*1-b*1;
    });
    removebetscollection.reverse();

    for (i in removebetscollection)
    {
        Bettingslip.delBet(removebetscollection[i].odd_id);
    }
    Bettingslip.pendingOddsAcceptance = false;
    Bettingslip.saveBettingslip();
};

Bettingslip.buildBetslipXML = function(bs)
{
    // use the currently stored object
    if(bs == false)
    {
        bs = Bettingslip.bettingslips;
    }

    var currentstake = Bettingslip.getStake();
    var data = "<?xml version=\"1.0\"?><bettingslips>", i, j;

    for (i in bs)
    {
        if(bs.hasOwnProperty(i))
        {
            var singleBetslip = "<bettingslip id='" + i + "'>";
            if(typeof Bettingslip.transactionids !== 'undefined' && !isNaN(Bettingslip.transactionids[i])) {
                singleBetslip += "<transaction_id>"+Bettingslip.transactionids[i]+"</transaction_id>";
            } 
            singleBetslip += "<transaction_async>0</transaction_async >";
            singleBetslip += "<amount>" + currentstake + "</amount>";
            singleBetslip += "<possibilities>" + bs[i].possibilities + "</possibilities>";

            //If mode is 0 - single bets, treat them as system bets (mode=2)
            if (Bettingslip.mode == 0){
                singleBetslip += "<sysk>1</sysk>";
                singleBetslip += "<sysn>" + bs[i].sysn + "</sysn>";
            }
            else if (Bettingslip.mode == 2)
            {
                singleBetslip += "<sysk>" + bs[i].sysk + "</sysk>";
                singleBetslip += "<sysn>" + bs[i].sysn + "</sysn>";
            }
            else if (Bettingslip.mode == 3)
            {
                singleBetslip += "<sysk>" + bs[i].sysk + "</sysk>";
                singleBetslip += "<sysk2>" + bs[i].sysk2 + "</sysk2>";
                singleBetslip += "<sysn>" + bs[i].sysn + "</sysn>";
            }

            var activeBetsCount = 0;
            for (j in bs[i].bets)
            {
                if(isNaN(j)) {
                    continue;
                }

                var bet = bs[i].bets[j];

                if (!bet.active) {
                    continue;
                }

                singleBetslip += "<bet id=\"" + j + "\">";
                singleBetslip += "<active>" + bet.active + "</active>";
                singleBetslip += "<type>" + bet.type + "</type>";

                // banked bets only apply in system mode
                if (Bettingslip.mode == 2 || Bettingslip.mode == 3) {
                    singleBetslip += "<bank>" + bet.bank + "</bank>";
                } else {
                    singleBetslip += "<bank>false</bank>";
                }

                singleBetslip += "<game_id>" + bet.game + "</game_id>";
                singleBetslip += "<tip1>" + bet.tip1 + "</tip1>";
                singleBetslip += "<odd1>" + bet.odd1 + "</odd1>";
                if (bet.tip2)
                {
                    singleBetslip += "<tip2>" + bet.tip2 + "</tip2>";
                    singleBetslip += "<odd2>" + bet.odd2 + "</odd2>";
                }
                if (bet.tip3)
                {
                    singleBetslip += "<tip3>" + bet.tip3 + "</tip3>";
                    singleBetslip += "<odd3>" + bet.odd3 + "</odd3>";
                }
                singleBetslip += "<multiway_id>" + bet.multiway_id + "</multiway_id>";
                singleBetslip += "<sub_group>" + bet.sub_group + "</sub_group>";
                singleBetslip += "<odd_id>" + bet.odd_id + "</odd_id>";
                singleBetslip += "<combi_cat>" + bet.combi_cat + "</combi_cat>";
                singleBetslip += "</bet>";

                activeBetsCount++;
            }

            singleBetslip += "</bettingslip>";

            if (activeBetsCount > 0) data += singleBetslip;
        }
    }

    data += "</bettingslips>";
    data = "data=" + encodeURI(data);
    return data;
};

Bettingslip.createEntryFromReturnXml = function (betxml, entry)
{
    if (betxml.find("active").text() == "false")
    {    entry.active = false;}

    entry.type = betxml.find("type").text();
    if (betxml.find("bank").text() == "true")
    {    entry.bank = true;}
    else
    {    entry.bank = false;}

    entry.odd_id = parseInt(betxml.find("odd_id").text(),10);
    entry.game = parseInt(betxml.find("game_id").text(),10);
    entry.multiway_id = parseInt(betxml.find("multiway_id").text(),10);
    entry.combi_cat = parseInt(betxml.find("combi_cat").text(),10);
    entry.sub_group = parseInt(betxml.find("sub_group").text(),10);
    entry.team1 = betxml.find("team1").text();
    entry.team1id = betxml.find("team1").attr('id');
    entry.team2 = betxml.find("team2").text();
    entry.team2id = betxml.find("team2").attr('id');
    entry.groupId = parseInt(betxml.find("group_id").text());

    if (betxml.find("market").length > 0) {
        entry.bettext = betxml.find("market").text(); // <market> replaces <bettext> since betfeed.exe 1.4.12
        entry.market_textid = betxml.find("market").attr('text_id');
    } else {
        // @TODO remove this after betfeed.exe 1.4.12
        entry.bettext =  betxml.find("bettext").text(); // backward compatibility for <bettext>
    }

    if (betxml.children("ref").length > 0)
    {
        entry.ref = betxml.find("ref").text();
    }

    entry.tip = parseInt(betxml.children("tip1").text(),10);
    entry.tiptext = betxml.children("tiptext1").text();
    entry.odd = parseInt(betxml.children("odd1").text(),10);

    if (betxml.children("tip2").length > 0 && betxml.children("tip2").text() != 0)
    {
        entry.tip2 = parseInt(betxml.children("tip2").text(),10);
        entry.tiptext2 = betxml.children("tiptext2").text();
        entry.odd2 = parseInt(betxml.children("odd2").text(),10);
    }
    if (betxml.children("tip3").length > 0 && betxml.children("tip3").text() != 0)
    {
        entry.tip3 = parseInt(betxml.children("tip3").text(),10);
        entry.tiptext3 = betxml.children("tiptext3").text();
        entry.odd3 = parseInt(betxml.children("odd3").text(),10);
    }

    if (betxml.children("market").length > 0 && betxml.children("market").text() != 0)
    {
        entry.betstyle = parseInt(betxml.children("market").attr('text_id'),10);
    }

    var oddchanged = betxml.find("oddchanged");
    /*if(oddchanged.length > 0)
    {
        // inactive odd
        if(oddchanged.attr("value") == -1)
        {
            entry.active = -1;
        }
        entry.status1 = parseInt(oddchanged.find("tip1").attr('changedStatus'), 10);
        entry.status2 = parseInt(oddchanged.find("tip2").attr('changedStatus'), 10);
        entry.status3 = parseInt(oddchanged.find("tip3").attr('changedStatus'), 10);
    }*/

    var explicitchange = betxml.find("changes");
    if(explicitchange.length > 0)
    {
        var marketchange = explicitchange.children("market");
        if(marketchange.length > 0) {
            if(marketchange.attr("type") == 1)
            {
                entry.oldmarket = Number(marketchange.attr("prev"));
                entry.newmarket = Number(marketchange.attr("cur"));
            }
            if(marketchange.attr("type") == 3)
            {
                entry.active = -1;
            }
        }
        entry.status1 = parseInt(explicitchange.children("odd1").attr('type'), 10);
        entry.status2 = parseInt(explicitchange.children("odd2").attr('type'), 10);
        entry.status3 = parseInt(explicitchange.children("odd3").attr('type'), 10);
    }

    return entry;
};

Bettingslip.removeStatusChanges = function(odd_id, tip, status)
{
    for (var i in Bettingslip.bettingslips)
    {
        for (var j in Bettingslip.bettingslips[i].bets)
        {
            if (Bettingslip.bettingslips[i].bets[j].odd_id == odd_id && Bettingslip.bettingslips[i].bets[j].tip1 == tip)
            {
                if (Bettingslip.bettingslips[i].bets[j].status1 != null && Bettingslip.bettingslips[i].bets[j].status1 == status) {
                    Bettingslip.bettingslips[i].bets[j].status1 = 0;
                }
            }
            else if (Bettingslip.bettingslips[i].bets[j].odd_id == odd_id && Bettingslip.bettingslips[i].bets[j].tip2 == tip)
            {
                if (Bettingslip.bettingslips[i].bets[j].status2 != null && Bettingslip.bettingslips[i].bets[j].status2 == status) {
                    Bettingslip.bettingslips[i].bets[j].status2 = 0;
                }
            }
            else if (Bettingslip.bettingslips[i].bets[j].odd_id == odd_id && Bettingslip.bettingslips[i].bets[j].tip3 == tip)
            {
                if (Bettingslip.bettingslips[i].bets[j].status3 != null && Bettingslip.bettingslips[i].bets[j].status3 == status) {
                    Bettingslip.bettingslips[i].bets[j].status3 = 0;
                }
            }
        }
    }
    Bettingslip.checkBetStatus();
};

Bettingslip.acceptChanges = function ()
{
    var i, j;
    for (i in Bettingslip.bettingslips)
    {
        for (j in Bettingslip.bettingslips[i].bets)
        {
            var entry = Bettingslip.bettingslips[i].bets[j];

            if (entry.status1 != null)
            {
                if (entry.status1 == -1)
                {    entry.status1 = -2;}
                else if (entry.status1 > 0)
                {    entry.status1 = 0;}
            }

            if (entry.status2 != null)
            {
                if (entry.status2 == -1)
                {    entry.status2 = -2;}
                else if (entry.status2 > 0)
                {    entry.status2 = 0;}
            }

            if (entry.status3 != null)
            {
                if (entry.status3 == -1)
                {    entry.status3 = -2;}
                else if (entry.status3 > 0)
                {    entry.status3 = 0;}
            }
        }
    }
    Bettingslip.pendingOddsAcceptance = false;
    Bettingslip.calcValues();
    Bettingslip.saveBettingslip();
    // update system ?
};

Bettingslip.saveBettingslip = function ()
{
    var date = new Date(), bs = "", i, j, bet;
    if(Bettingslip.checkBettingslipCookie() == false)
    {
        if (Bettingslip.bettingslips.length > 0)
        {
            date.setTime(date.getTime() + 3600000);

            bs = Bettingslip.buildCookieString();

            document.cookie = "bettingslip=" + encodeURIComponent(bs) + "; expires=" + date.toGMTString() + "; path=/"+secureCookie;

        }
        else
        {
            document.cookie = "bettingslip=; expires=" + date.toGMTString() + "; path=/"+secureCookie;
        }
    }
    Bettingslip.showLiveBetMsg();
};

/**
 * comparse the currently stored bettingslip from the cookie with the JS betingslip
 * @returns {Boolean} true if cookie and JS are identical
 */
Bettingslip.checkBettingslipCookie = function()
{
    var currentbs = "", i, j, c, bet, cookies = document.cookie.split(";"), bs = "";
    var validbet = false;

    if (Bettingslip.bettingslips.length > 0)
    {
        currentbs = Bettingslip.buildCookieString();
    }

    for (var i in cookies)
    {
        c = $.trim(cookies[i]);
        var cookie = c.split("=");

        if (cookie.length != 2)
        {    continue;}

        if (cookie[0] == "bettingslip")
        {
            bs = decodeURIComponent(cookie[1]);
            break;
        }
    }

    if (bs.length > 0)
    {
        if(currentbs == bs)
        {
            validbet = true;
        }
    }
    return validbet;
};

/**
 * calculate the winnings for the given params
 */
Bettingslip.calcMaxWin = function(multi, stake, possibilities)
{
    /**
     * Germany 5% tax
     */
    if(countryID == 82)
    {
        win = multi * (Math.round(stake * taxPercentage) / 100);
    }
    else
    {
        win = multi * (stake / 100);
    }

    /* calculate the win by dividing the potential win through the number of ways (possibilities) */
    win = win / possibilities;

    return win;
};

Bettingslip.calculateNumberOfBets = function(sysn, sysk)
{
    if(sysn === sysk)
    {
        return 1;
    }
    else if(sysk == 0)
    {
        return 0;
    }
    var sysdiff = sysn-sysk-1;
    return factorialArray[sysn-1] / (factorialArray[sysk-1] * factorialArray[sysdiff]);
};

Bettingslip.delBetGroup = function(bet, subGroupCount)
{
    Bettingslip.delBet(bet);

    Bettingslip.hideErrorMessage();
    Bettingslip.hideInfoMessage();
};

Bettingslip.checkMultiway = function()
{
    var combicatcollection = new Array(), singlebetentry, combistr, arrind, arradd;
    if (Bettingslip.bettingslips.length > 0)
    {
        for (var i in Bettingslip.bettingslips)
        {
            for (var j in Bettingslip.bettingslips[i].bets)
            {
                singlebetentry = Bettingslip.bettingslips[i].bets[j];
                arrind = singlebetentry.game + String(singlebetentry.combi_cat);
                arradd = singlebetentry.odd_id;
                if(typeof combicatcollection[arrind] === 'undefined' || combicatcollection[arrind].length < 1)
                {
                    combicatcollection[arrind] = new Array();
                }
                combicatcollection[arrind].push(arradd);
            }
        }
    }
    if (combicatcollection.length != 0)
    {
        for (var combi in combicatcollection)
        {
            var smallestbet = combicatcollection[combi].sort(function(a,b){return a-b;})[0];
            for (var i in Bettingslip.bettingslips)
            {
                for (var j in Bettingslip.bettingslips[i].bets)
                {
                    singlebetentry = Bettingslip.bettingslips[i].bets[j];
                    combistr = String(combi);
                    /* the last digit of combistr is the combi_cat, everything before that is the game_id */
                    if(singlebetentry.game == combistr.substring(0, (combistr.length-1)) && singlebetentry.combi_cat == combistr.slice(-1))
                    {
                        Bettingslip.bettingslips[i].bets[j].multiway_id = Bettingslip.currentMultiwayCounter;
                    }
                }
            }
            Bettingslip.currentMultiwayCounter ++;
        }
    }
    Bettingslip.currentMultiwayCounter = 1;
};

Bettingslip.updateBet = function(betelement)
{
    var newodd;
    // check if bet is active
    if(betelement.active != -1)
    {
        newodd = {gameid: betelement.game, odd_id: betelement.odd_id, ref: betelement.ref, bettext: betelement.bettext,
            tip1: betelement.tip, tiptext1: betelement.tiptext, odd1: betelement.odd, status1: betelement.status1};

        if(typeof betelement.tip2 !== 'undefined' && betelement.tip2 != 0)
        {
            newodd.tip2 = betelement.tip2;
            newodd.tiptext2 = betelement.tiptext2;
            newodd.odd2 = betelement.odd2;
            newodd.status2 = betelement.status2;
        }
        if(typeof betelement.tip3 !== 'undefined' && betelement.tip3 != 0)
        {
            newodd.tip3 = betelement.tip3;
            newodd.tiptext3 = betelement.tiptext3;
            newodd.odd3 = betelement.odd3;
            newodd.status3 = betelement.status3;
        }
        if(typeof betelement.oldmarket !== 'undefined' && betelement.oldmarket != 0
        && typeof betelement.newmarket !== 'undefined' && betelement.newmarket != 0)
        {
            newodd.oldmarket = betelement.oldmarket;
            newodd.newmarket = betelement.newmarket;
        }

        Bettingslip.updateOdd(newodd);
        // check each tip
    }
    else
    {
        // bet is inactive marked with -1, "remove" it
        newodd = {gameid: betelement.game, odd_id: betelement.odd_id, ref: betelement.ref};
        Bettingslip.deactivateBet(newodd);
        Bettingslip.checkBetStatus();
    }
};

Bettingslip.buildCookieString = function()
{
    var bs = "";
    bs += Bettingslip.getStake() + ",";
    bs += Bettingslip.mode + ",";
    if (Bettingslip.mode != 3)
    {
        bs += Bettingslip.getSys(0) + ",";
    }
    else
    {
        bs += Bettingslip.getSys(2) + ",";
        bs += Bettingslip.getSys(3) + ",";
    }

    for (i in Bettingslip.bettingslips)
    {
        for (j in Bettingslip.bettingslips[i].bets)
        {
            bet = Bettingslip.bettingslips[i].bets[j];

            bs += bet.active + "/";
            bs += bet.type + "/";
            bs += bet.bank + "/";
            bs += bet.game + "/";
            bs += bet.tip1 + "/";
            bs += bet.odd1 + "/";
            bs += bet.tip2 + "/";
            bs += bet.odd2 + "/";
            bs += bet.tip3 + "/";
            bs += bet.odd3 + "/";
            bs += bet.multiway_id + "/";
            bs += bet.sub_group + "/";
            bs += bet.odd_id + "/";
            bs += bet.combi_cat + "/";
            bs += bet.groupId + "/";
            bs += bet.betstyle + "!";
        }

        if (bs.charAt(bs.length - 1) == "!")
        {   bs = bs.substr(0, bs.length - 1);}

        bs += ";";
    }

    if (bs.charAt(bs.length - 1) == ";")
    {    bs = bs.substr(0, bs.length - 1);}

    return bs;
};

Bettingslip.updateSystem = function ()
{
    var i;
    var sysk = 0;
    var sysk2 = 0;
    var sysn = 0;
    var sysb = 0;
    var bankDeactivateArray =new Array();

    if (Bettingslip.mode == 2 || Bettingslip.mode == 0)
    {
        for (i in Bettingslip.bettingslips)
        {
            Bettingslip.bettingslips[i].sysk = Bettingslip.getSys();

            bankDeactivateArray = Bettingslip.calcualteSysNumbers(i);

            sysk = Bettingslip.bettingslips[i].sysk;
            sysn = Bettingslip.bettingslips[i].sysn;
            sysb = Bettingslip.bettingslips[i].sysb;
            if (sysn<1) // at least three bets must be selected
            {
                Bettingslip.placingBetAllowed = false;
            }
            else if (sysk < 1) // at least one must be played (e.g. out of three)
            {
                Bettingslip.placingBetAllowed = false;
            }
            else if(sysn < sysk && sysk > 0) // cannot be equal or less
            {
                Bettingslip.placingBetAllowed = false;
            }
            else if((sysn+sysb) > 19) // not more than 20 bets are allowed (only 19 playable)
            {
                Bettingslip.placingBetAllowed = false;
            }
            else
            {
                Bettingslip.placingBetAllowed = true;
            }
            //Needed for single bets as system bet
            if(Bettingslip.mode == 0 && sysn > 0){
                Bettingslip.placingBetAllowed = true;
            }
            /* bank buttons */
            if (sysn <= 1)
            {
                for (k in bankDeactivateArray ){
                    Bettingslip.changeBankButtonState(bankDeactivateArray[k], 0);
                }
            }
            else if(sysn > 1 && (sysk + 1 > sysn)){
                for (l in bankDeactivateArray ) {
                    Bettingslip.changeBankButtonState(bankDeactivateArray[l], 0);
                }
            }
            else{
                for (m in bankDeactivateArray ){
                    Bettingslip.changeBankButtonState(bankDeactivateArray[m], 1);
                }
            }

            if(Bettingslip.placingBetAllowed)
            {
                Bettingslip.addSystemInfo(i);
            }
            else
            {
                // clear the info for the system bets
                $(".betslip_system_info").html("");
            }
        }
    }//end check mode - system (standard)
    else if(Bettingslip.mode == 3)
    {
        for (i in Bettingslip.bettingslips)
        {
            Bettingslip.bettingslips[i].sysk = Bettingslip.getSys(2);
            Bettingslip.bettingslips[i].sysk2 = Bettingslip.getSys(3);//!!

            bankDeactivateArray = Bettingslip.calcualteSysNumbers(i);

            sysk = Bettingslip.bettingslips[i].sysk;
            sysk2 = Bettingslip.bettingslips[i].sysk2;
            sysn = Bettingslip.bettingslips[i].sysn;
            sysb = Bettingslip.bettingslips[i].sysb;

            if (sysn < 2) // at least two bets must be selected
            {
                Bettingslip.placingBetAllowed = false;
            }
            else if (sysk < 1 || sysk2 < 1) // at least 1-x out of x must be played
            {
                Bettingslip.placingBetAllowed = false;
            }
            else if(sysk2 <= sysk) // sysk needs to be bigger or equal to sysk2
            {
                Bettingslip.placingBetAllowed = false;
            }
            else if((sysn+sysb) > 19) // not more than 20 bets are allowed (only 19 playable)
            {
                Bettingslip.placingBetAllowed = false;
            }
            else
            {
                Bettingslip.placingBetAllowed = true;
            }

            /* bank buttons */
            if (sysn <= 2)
            {
                for (k in bankDeactivateArray ){
                    Bettingslip.changeBankButtonState(bankDeactivateArray[k], 0);
                }
            }
            else if(sysn > 2 && (sysk2 >= sysn)){
                for (l in bankDeactivateArray ) {
                    Bettingslip.changeBankButtonState(bankDeactivateArray[l], 0);
                }
            }
            else{
                for (m in bankDeactivateArray ){
                    Bettingslip.changeBankButtonState(bankDeactivateArray[m], 1);
                }
            }

            if(Bettingslip.placingBetAllowed)
            {
                Bettingslip.addSystemPlusInfo(i);
            }
            else
            {
                // clear the info for the system bets
                $(".betslip_system_info").html("");
            }
        }
    }//end check mode - systemPlus (system in system)
    else{
        Bettingslip.placingBetAllowed = true;
    }

    if (sysn <=3)
    {
        for (k in bankDeactivateArray ){
            Bettingslip.changeBankButtonState(bankDeactivateArray[k], 0);
        }
    }
    else if(sysn>3 && (sysk2>=sysn)){
        for (l in bankDeactivateArray ) {
            Bettingslip.changeBankButtonState(bankDeactivateArray[l], 0);
        }
    }
    else{
        for (m in bankDeactivateArray ){
            Bettingslip.changeBankButtonState(bankDeactivateArray[m], 1);
        }
    }
};

Bettingslip.getSys = function (arg)
{
    //Override for single bets, sysk will always be 1
    if(Bettingslip.mode == 0){
        return 1;
    }
    if(arg == 3){
        return parseInt($("#betslip_sysk2").val(),10);
    }else if(arg == 2){
        return parseInt($("#betslip_sysk1").val(),10);
    }else{
        return parseInt($("#betslip_sysk").val(),10);
    }

};

Bettingslip.sysChange = function (value, arg)
{
    var sys = Bettingslip.getSys(arg);
    var maxValue = 0;

    if (Bettingslip.bettingslips.length > 0 && Bettingslip.bettingslips[0].sysn != null)
    {
        maxValue = Bettingslip.bettingslips[0].sysn; // get number of available system bets
    }

    sys += value;
    if (sys < 0)
    {
        sys = 0;
    }
    if (sys > maxValue)
    {
        sys = maxValue;
    }
    Bettingslip.setSys(sys, arg);

    if (value == 0 || arg > 1)
    {
        Bettingslip.updateSystem();
        Bets.checkBets();
        Bettingslip.calcValues();
        Bettingslip.saveBettingslip();
    }
};

function hashPair(a, b)
{
    return a << 16 & 0xffff0000 | b & 0x0000ffff;
}

Bettingslip.calcualteSysNumbers = function(betslippos)
{
    var checkedGameCombi = new Array();
    var bankDeactivateArray =new Array();
    var j;

    Bettingslip.bettingslips[betslippos].sysn = 0;
    Bettingslip.bettingslips[betslippos].sysb = 0;

    for (j in Bettingslip.bettingslips[betslippos].bets)
    {
        var bet = Bettingslip.bettingslips[betslippos].bets[j];

        if (bet.active == false)
        {    continue;}

        if (bet.bank == true)
        {
            Bettingslip.bettingslips[betslippos].sysb++;
        }
        else if ($.inArray(hashPair(bet.game, bet.combi_cat), checkedGameCombi) == -1)
        {
            bankDeactivateArray.push(bet.odd_id);
            checkedGameCombi.push(hashPair(bet.game, bet.combi_cat));
            Bettingslip.bettingslips[betslippos].sysn++;
        }
    }

    $(".sysn").text(Bettingslip.bettingslips[betslippos].sysn);
    $(".sysb").text(Bettingslip.bettingslips[betslippos].sysb);

    return bankDeactivateArray;
};

Bettingslip.stakeInputChange = function ()
{
    Bettingslip.stakeChange(0);
};

Bettingslip.restoreBettingslip = function ()
{
    var bs = "", i, c, j, pos= 3, tempbs = {};
    var cookies = document.cookie.split(";");

    for (i in cookies)
    {
        c = $.trim(cookies[i]);
        var cookie = c.split("=");

        if (cookie.length != 2)
        {    continue;}

        if (cookie[0] == "bettingslip")
        {
            bs = decodeURIComponent(cookie[1]);
            break;
        }
    }

    if (bs.length > 0)
    {
        var slip = bs.split(",");
        Bettingslip.changeMode(parseInt(slip[1], 10));
        if (Bettingslip.mode == 3)
        {
            pos = 4;
        }
        slip[pos] = slip[pos].split(";");

        for (i in slip[pos])
        {
            slip[pos][i] = slip[pos][i].split("!");

            for (j in slip[pos][i])
            {
                slip[pos][i][j] = slip[pos][i][j].split("/");
            }
        }

        var curstake = Bettingslip.getStake();
        var newstake = parseInt(slip[0], 10);
        Bettingslip.stakeChange(newstake - curstake);

        var data = new Array();

        for (i in slip[pos])
        {
            tempbs = {
                bets: new Array()
            };

            if (Bettingslip.mode == 3) {
                tempbs.sysk = slip[2];
                tempbs.sysk2 = slip[3];
            }
            else {
                tempbs.sysk = slip[2];
            }

            for (j in slip[pos][i])
            {
                var tempbet = new Array();
                tempbet.active = slip[pos][i][j][0];
                tempbet.type = slip[pos][i][j][1];
                tempbet.bank = slip[pos][i][j][2];
                tempbet.game = slip[pos][i][j][3];
                tempbet.tip1 = slip[pos][i][j][4];
                tempbet.odd1 = slip[pos][i][j][5];
                tempbet.tip2 = slip[pos][i][j][6];
                tempbet.odd2 = slip[pos][i][j][7];
                tempbet.tip3 = slip[pos][i][j][8];
                tempbet.odd3 = slip[pos][i][j][9];
                tempbet.multiway_id = slip[pos][i][j][10];
                tempbet.sub_group = slip[pos][i][j][11];
                tempbet.odd_id = slip[pos][i][j][12];
                tempbet.combi_cat = slip[pos][i][j][13];
                tempbet.groupId = slip[pos][i][j][14];
                tempbet.betstyle = slip[pos][i][j][15];

                tempbs.bets.push(tempbet);
            }
            data.push(tempbs);
        }

        betslipscookie = data;

        data = Bettingslip.buildBetslipXML(betslipscookie);

        try
        {
            $.ajax({
                type: 'POST',
                url: (typeof cpAjaxBaseUrl !== "undefined" ? cpAjaxBaseUrl : "") + '/index.php?r=bets/restoreBettingslip',
                data: data,
                async: false,
                complete: function (jqXHR)
                {
                    if (jqXHR.status == 200 && jqXHR.responseXML)
                    {
                        Bettingslip.restoreBettingslipAfterXmlReturned(jqXHR.responseXML);
                    }
                }
            });
        }
        catch (e) {}

        Bettingslip.updateSystem(); // needed to set sysn

        var finalProcessDone = false;
        if (Bettingslip.mode != 3)
        {
            var cursys = Bettingslip.getSys();
            var newsys = 0;
            if(typeof betslipscookie[0].sysk != "undefined")
            {
                newsys = parseInt(betslipscookie[0].sysk, 10);
            }

            var change = newsys - cursys;
            Bettingslip.sysChange(change);
            if (change !== 0) {
            Bettingslip.sysChange(0);
        }

            finalProcessDone = true;
        }
        else
        {
            var newsys1 = parseInt(betslipscookie[0].sysk, 10);
            Bettingslip.setSys(newsys1, 2);
            var newsys2 = parseInt(betslipscookie[0].sysk2, 10);
            Bettingslip.setSys(newsys2, 3);
        }
        
        if (!finalProcessDone) {
        Bettingslip.updateSystem();
        Bets.checkBets();
        Bettingslip.calcValues();
        Bettingslip.saveBettingslip();
        }
        
        Bets.checkBets(Bettingslip.determineIfGGL);
        Bettingslip.determineIfGGL();

        return true;
    }
    else
    {    return false;}

    return false;
};

/**
 * Functionality to restore bettingslip after data was obtained
 * from betfeed.exe.
 * 
 * @param xml
 */
Bettingslip.restoreBettingslipAfterXmlReturned = function(xml) 
{
    var bettingslips = $(xml).find("bettingslip");
    for (var i = 0; i < bettingslips.length; i++)
    {
        var bets = $(bettingslips[i]).find("bet");
        for (var j = 0; j < bets.length; j++)
        {
            var entry = {active: true};
            entry = Bettingslip.createEntryFromReturnXml($(bets[j]), entry);
            Bettingslip.addTip(entry);
        }
    }
};

/**
 * After betfeed.exe returns bettingslip data for a ticket to be replaced,
 * process such data and update bettingslip.
 *
 * @param xml
 */
Bettingslip.processReplayTicketBettingslip = function(xml)
{
    if (xml)
    {
        Bettingslip.restoreBettingslipAfterXmlReturned(xml);

        Bettingslip.updateSystem(); // needed to set sysn

        var finalProcessDone = false;
        if (Bettingslip.mode != 3)
        {
            var cursys = Bettingslip.getSys();
            var newsys = 0;

            var change = newsys - cursys;
            Bettingslip.sysChange(change);
            if (change !== 0) {
                Bettingslip.sysChange(0);
            }
        }
    }
};

/**
 * Check if there are live bets (type L or X) in the bettingslip.
 * 
 * @returns {boolean}
 */
Bettingslip.liveBetsInBetslipExist = function()
{
    var liveGames = false;
    if (Bettingslip.bettingslips.length > 0) {
        for (var i = 0, l = Bettingslip.bettingslips.length; i<l; i++) {
            var bettingslip_item = Bettingslip.bettingslips[i];
            for (var j = 0, k = bettingslip_item.bets.length; j<k; j++) {
                var entry = bettingslip_item.bets[j];
                if ((entry.type == "L" || entry.type == "X") && (entry.game !== undefined && entry.game != "")) {
                    liveGames = true;
                    return liveGames;
                }
            }
        }
    }
    return liveGames;
};

/**
 * Get Bettingslip lowest odds array grouped by game ID. 
 * 
 * @returns {Array}
 * Format: <b>[bettingslipId_gameID => minOddVal, bettingslipId_gameID => minOddVal,...] ; Example: ['0_445322' => 145, '0_543111' => 210,...]</b>
 */
Bettingslip.getBSlipLowestOddsValuesGroupedByGame = function()
{
    var groupedOddsArr = []; // format [gameId => lowestOddVal, gameId => lowestOddVal, gameId => lowestOddVal]
    var regexIsUnsgInt = /^\d+$/;
    var groupedDataKey;
    var currBetObj;
    
    for (var betslipId in Bettingslip.bettingslips) {
        for (var betId in Bettingslip.bettingslips[betslipId].bets) {
            // add to groupedOddsArr only if matching index exist, and that value is not greater than current value
            currBetObj = Bettingslip.bettingslips[betslipId].bets[betId];
            groupedDataKey = betslipId + '_' + currBetObj['game'] + '_' + currBetObj['combi_cat'];
            // check for all possible odds(1-3) for lowest one
            if (typeof currBetObj['odd1'] != 'undefined'
                && regexIsUnsgInt.test(currBetObj['odd1']) // on remove-tip goes to null
                && !(typeof groupedOddsArr[groupedDataKey] != 'undefined'
                    && currBetObj['odd1'] > groupedOddsArr[groupedDataKey])
            ) {
                groupedOddsArr[groupedDataKey] = parseInt(currBetObj['odd1']);
            }
            
            if (typeof currBetObj['odd2'] != 'undefined'
                && regexIsUnsgInt.test(currBetObj['odd2']) // on remove-tip goes to null
                && !(typeof groupedOddsArr[groupedDataKey] != 'undefined'
                    && currBetObj['odd2'] > groupedOddsArr[groupedDataKey])
            ) {
                groupedOddsArr[groupedDataKey] = parseInt(currBetObj['odd2']);
            }
            
            if (typeof currBetObj['odd3'] != 'undefined'
                && regexIsUnsgInt.test(currBetObj['odd3']) // on remove-tip goes to null
                && !(typeof groupedOddsArr[groupedDataKey] != 'undefined'
                    && currBetObj['odd3'] > groupedOddsArr[groupedDataKey])
            ) {
                groupedOddsArr[groupedDataKey] = parseInt(currBetObj['odd3']);
            }
        }
    }
    
    return groupedOddsArr;
};

/**
 * Shows link to betting information on xtip.co.uk domain in case there is a live odd selected
 */
Bettingslip.showLiveBetMsg = function()
{
    if ($('#msg-live-bets').length) {
        if (Bettingslip.liveBetsInBetslipExist()) {
            $('#msg-live-bets').show();
        } else {
            $('#msg-live-bets').hide();
        }
    }
}

Bets.checkXtremeBonusTeaser = function (label, userType, tldomain)
{
    var result = {
        bonusValidTotalBetsCount: 0, // num. of bets that satisfy bonus conditions
        bonusValidLiveBetsCount: 0, // num. of live bets that are part of `bonusValidTotalBetsCount`
        totalValidBetsCountingValue: 0, // counting value depending current factors can be affected by type of bet if live or prematch.. (for now first two live bets here counting as value 2)
        minimumBetOdd: 100
    };
    var i, j, k;
    var minOdd = 100;
    var lowestGroupedOddsArr = []; // for checking minimum odd per game
    var groupedDataKey; // key in format `betslipID_gameID_combiCat`
    var processedGroupedOddsArr = []; // proccessed ids from `lowestGroupedOddsArr`
    var isValid; // flag checking if current bet in loop is valid
    var entry; // current bet data in betslip loop
    var bonusType = Bets.getXtremeBonusType(label, tldomain);
    
    if (bonusType == "ONE_PERC_PER_BET_XTREME_BONUS") {
        minOdd = 150; // new xtreme cashpoint bonus rule
    } else if (bonusType == "ONE_PERC_PER_BET_XTIP_PREMIUM_BONUS") {
        minOdd = 121; // new xtreme xtip(!co.uk) bonus rule
    } else {
        if (userType == 2 || xtip_big_bonus_active == 0){ // prev.: || label == 'cashpoint'
            minOdd = 100;
        }
        if (domain == 'dk' || (typeof tld !== "undefined" && tld == 'dk')) {
            minOdd = 121;
        }
    }
    
    result.minimumBetOdd = minOdd;
    
    if (Bettingslip.mode == 1) { // applies only to Combination bets
        // get first lowest odds per game
        $.when(Bettingslip.getBSlipLowestOddsValuesGroupedByGame())
        .done(function(lowestGroupedOddsArr) {
            for (i in Bettingslip.bettingslips) {
                for (j in Bettingslip.bettingslips[i].bets) {

                    isValid = true;
                    entry = Bettingslip.bettingslips[i].bets[j];
                    groupedDataKey = i+'_'+entry.game+'_'+entry.combi_cat;

                    if(entry.active !== -1)
                    {
                        if (typeof processedGroupedOddsArr[groupedDataKey] == 'undefined' // not processed yet
                            && typeof lowestGroupedOddsArr[groupedDataKey] != 'undefined'
                            && lowestGroupedOddsArr[groupedDataKey] >= result.minimumBetOdd // satisfies min-odd-rule
                        ) {
                            processedGroupedOddsArr[groupedDataKey] = true; // create elem, mark as processed..
                            // ALSO COVERS RULE FOR LIVE BETS TO COUNT VALUE AS 2, DIFFERENT BETS
                            // WITH SAME GAME ID WILL HAVE SAME entry.type VALUE
                            result.bonusValidTotalBetsCount++; // count valid bet(anytype)
                            // check for live match
                            if (entry.type != 'N') { // not prematch
                                // check for counting total value - needed for old bonus and non-cashpoint bonuses
                                if (result.bonusValidLiveBetsCount < 2 && (userType != 2)
                                    && (xtip_big_bonus_active == 1 || label == 'cashpoint')
                                ) {
                                    result.totalValidBetsCountingValue += 2; // first two live bets count as value 2
                                } else {
                                    result.totalValidBetsCountingValue++; // normal counting value
                                }
                                // count live bet
                                result.bonusValidLiveBetsCount++;
                            } else {
                                result.totalValidBetsCountingValue++;
                            }
                        }
                    }
                }
            }
        });
    } else {
        $("#xtremeBonusTeaser").hide();
    }
    
    return result;
};

Bets.getXtremeBonusType = function (label, tldomain)
{
    var bonusTypes = {
        standardExtremeBonus: "STANDARD_XTREME_BONUS",
        onePercPerBetExtremeBonus: "ONE_PERC_PER_BET_XTREME_BONUS",
        onePercPerBetXtipPremiumBonus: "ONE_PERC_PER_BET_XTIP_PREMIUM_BONUS"
    };
    
    if (label === 'cashpoint'
        || label === 'TV-MEDIA'
        || label === 'betcenter'
        || (label==='xtip' && tldomain === 'co.uk')
    ) {
        return bonusTypes.onePercPerBetExtremeBonus;
    } else if ( ( label === 'sportwetten' || label==='xtip' ) && tldomain !== 'co.uk') {
        return bonusTypes.onePercPerBetXtipPremiumBonus;
    }
    
    return bonusTypes.standardExtremeBonus;
};

Bettingslip.checkGGL = function (callback) {
    Bettingslip.hasGGL = false;
    Bettingslip.betSpecificGGL = [];
    var tempBetSpecificGGL = [];
    for (var i in Bettingslip.bettingslips) {
        if (Bettingslip.bettingslips[i].ggl) {
            var keys = Bettingslip.bettingslips[i].ggl;
            $(keys).children('link').each(function (elem) {
                var gglType = parseInt($(this).children('type').text());
                // console.log(gglType);
                if (gglType > 0) {
                    var gglGroup1 = $(this).children('key1').text();
                    var gglGroup2 = $(this).children('key2').text();

                    var foundBetIndexes = [];

                    for (var j in Bettingslip.bettingslips[i].bets) {
                        // console.log(Bettingslip.bettingslips[i].bets[j]);
                        if (gglType === 1) {
                            // console.log('GGL 1 detected');
                            var currentGameGroup = Bettingslip.bettingslips[i].bets[j].game;
                            if (currentGameGroup == gglGroup1 || currentGameGroup == gglGroup2) {
                                foundBetIndexes.push(j);
                            }
                        }

                        if (gglType === 2) {
                            var currentGameGroup = Bettingslip.bettingslips[i].bets[j].groupId;
                            if (currentGameGroup == gglGroup1 || currentGameGroup == gglGroup2) {
                                foundBetIndexes.push(j);
                            }
                        }

                        // if (gglType == 5) {
                        //     var currentGameGroup = Bettingslip.bettingslips[i].bets[j];
                        //     if (currentGameGroup == gglGroup1 || currentGameGroup == gglGroup2) {
                        //         foundBetIndexes.push(j);
                        //     }
                        // }
                    }
                    for (var p in foundBetIndexes) {
                        Bettingslip.hasGGL = true;
                        var ggl = {
                            'groupToSendTo': '',
                            'gameIdToAttach': '',
                            'combiCatToAttach': ''
                        };
                        if (Bettingslip.bettingslips[i].bets[foundBetIndexes[0]].multiway_id == 'undefined') {
                            Bettingslip.bettingslips[i].bets[foundBetIndexes[0]].multiway_id = 1;
                        }
                        Bettingslip.bettingslips[i].bets[foundBetIndexes[p]].multiway_id = Bettingslip.bettingslips[i].bets[foundBetIndexes[0]].multiway_id;
                        Bettingslip.bettingslips[i].bets[foundBetIndexes[p]].gglNewMultiwayId = Bettingslip.bettingslips[i].bets[foundBetIndexes[0]].multiway_id;
                        Bettingslip.bettingslips[i].bets[foundBetIndexes[p]].gameIdToAttach = Bettingslip.bettingslips[i].bets[foundBetIndexes[0]].game;
                        Bettingslip.bettingslips[i].bets[foundBetIndexes[p]].combiCatToAttach = Bettingslip.bettingslips[i].bets[foundBetIndexes[0]].combi_cat;
                        ggl.groupToSendTo = Bettingslip.bettingslips[i].bets[foundBetIndexes[0]].multiway_id;
                        ggl.gameIdToAttach = Bettingslip.bettingslips[i].bets[foundBetIndexes[0]].game;
                        ggl.combiCatToAttach = Bettingslip.bettingslips[i].bets[foundBetIndexes[0]].combi_cat;
                        tempBetSpecificGGL[Bettingslip.bettingslips[i].bets[foundBetIndexes[p]].game] = ggl;
                    }
                }
            });
        }
    }
    Bettingslip.betSpecificGGL = tempBetSpecificGGL;
    if (tempBetSpecificGGL.length > 0 && Bettingslip.checkBetsWithGGL == false) {
        if (typeof callback === "function") {
            Bettingslip.checkBetsWithGGL = true;
            callback();
        }
    }
};

Bettingslip.rebuildBettingslipWithGGL = function() {
    if (Bettingslip.hasGGL){
        $("#betslip_tabs_content").html('');
        for (var i in Bettingslip.bettingslips) {
            for (var j in Bettingslip.bettingslips[i].bets) {
                var entrytempl = Bettingslip.bettingslips[i].bets[j];
                Bettingslip.addNewBet(entrytempl, true, false);
            }
        }
        Bettingslip.hasBeenGGLed = true;
        Bettingslip.checkBetsWithGGL = false;
        Bettingslip.hasGGL = false;
    }

};

Bettingslip.rebuildBettingslipWithoutGGL = function () {
    Bettingslip.hasBeenGGLed = false;
    $("#betslip_tabs_content").html('');
    for (i in Bettingslip.bettingslips) {
        for (j in Bettingslip.bettingslips[i].bets) {
            var entry = Bettingslip.bettingslips[i].bets[j];
            delete entry.combiCatToAttach;
            delete entry.gameIdToAttach;
            delete entry.gglNewMultiwayId;
            delete entry.multiway_id;
        }
    }
    Bettingslip.saveBettingslip();
    Bettingslip.delSlip(0, false);
    Bettingslip.restoreBettingslip();
    Bettingslip.calcValues();
};

Bettingslip.determineIfGGL = function() {
    if (Bettingslip.hasGGL) {
        if (Bettingslip.bettingslips[0].alreadyShownGGLMessage === undefined || Bettingslip.bettingslips[0].alreadyShownGGLMessage !== true) {
            if (typeof openPopupNotification === "function") {
            openPopupNotification("text_popup", "ggl_betslip_message");
            } else {
                $("#error_container").load(baseURL + "/site/showGGLMessage", function () {
                    $("#error_container").show();
                    centerError();
                });
            }

            //
            Bettingslip.bettingslips[0].alreadyShownGGLMessage = true;
        }
        Bettingslip.rebuildBettingslipWithGGL();
    }
};